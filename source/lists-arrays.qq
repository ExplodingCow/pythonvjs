\topic 
    \id lists-arrays
    \heading \lang ru
        Списки / массивы
    \heading \lang en
        Lists / arrays
    \description \lang ru
        Стандартная структура данных для хранения нескольких элементов в
        определённом порядке в Python называется списком (`list`), в JavaScript
        называется массивом (`Array`). 
    \description \lang en
        The basic structure to store several elements in a sequence is called
        `list` in Python and `Array` in JavaScript.
    \compare
        \id list-creation
        \what \lang ru
            Создание списка / массива
        \what \lang en
            Creation of list / array
        \python
            my_list = [3, 2, 10, "Hello"]
            \out my_list
        \js
            var my_array = [3, 2, 10, "Hello"]
            \out my_array
    \compare
        \id index-access
        \what \lang ru
            Доступ по индексу
        \what \lang en
            Access by index
        \python
            my_list = [3, 2, 10, "Hello"]
            \out my_list[0]
            \out my_list[1]
            \out my_list[-1]
        \js
            var my_array = [3, 2, 10, "Hello"]
            \out my_array[0]
            \out my_array[1]
            \out my_array[my_array.length-1]
    \compare
        \id string-indexes
        \what \lang ru
            Индексы как строки
        \what \lang en
            String indexes
        \python
            my_list = [2, 3, 10]
            my_list["0"]
        \js
            var my_array = [2, 3, 10]
            \out my_array["0"]
            \comment \lang ru
                В JavaScript массивы являются частным случаем объектов,
                а объекты индексируются строками. Числовые индексы
                неявно преобразуются в строки.
            \comment \lang en
                In JavaScript, Arrays are Objects, and Objects
                are indexed by strings. Numeric indexes are coerced
                into strings.
    \compare
        \id modification-of-value
        \what \lang ru
            Изменение значения элемента списка / массива
        \what \lang en
            Modification of the value of elements of list / array
        \python
            my_list = [3, 2, 10, "Hello"]
            my_list[0] = 100
            \out my_list
        \js
            var my_array = [3, 2, 10, "Hello"]
            my_array[0] = 100
            \out my_array
    \compare
        \id length
        \what \lang ru
            Длина списка / массива
        \what \lang en
            Length of list / array
        \python
            my_list = [3, 2, 10, "Hello"]
            \out len(my_list)
        \js
            var my_array = [3, 2, 10, "Hello"]
            \out my_array.length
    \compare
        \id appending
        \what \lang ru
            Добавление элемента в список / массив
        \what \lang en
            Appending element to list / array
        \python
            my_list = [3, 2, 10, "Hello"]
            my_list.append(5)
            \out my_list
        \js
            var my_array = [3, 2, 10, "Hello"]
            my_array.push(5)
            \out my_array
    \compare
        \id appending-several
        \what \lang ru
            Добавление нескольких элементов в список / массив
        \what \lang en
            Adding several elements in list / array
        \python
            my_list = [3, 2]
            my_list.extend([12, 20])
            \out my_list
        \js
            var my_array = [3, 2]
            my_array.push(12, 20)
            \out my_array
    \compare
        \id extending
        \what \lang ru
            Расширение списка / массива элементами другого списка / массива
        \what \lang en
            Extending list / array with elements of another list / array
        \python
            my_list = [3, 2, 10, "Hello"]
            other_list = [1, 2, 3]
            my_list.extend(other_list)
            \out my_list
        \js
            var my_array = [3, 2, 10, "Hello"]
            var other_array = [1, 2, 3]
            my_array.push.apply(my_array, other_array)
            \out my_array
            \ref http://stackoverflow.com/a/1374131/3025981
        \js
            var my_array = [3, 2, 10, "Hello"]
            var other = [1, 2, 3]
            Array.prototype.push.apply(my_array, other)
            \out my_array
            \ref http://stackoverflow.com/a/1374131/3025981
        \js
            Array.prototype.extend = function (other) {
                /* you should include a test to 
                 * check whether other_array really 
                 * is an array */
                other.forEach(function(v) {
                    this.push(v)
                }, this);    
            }
            var my_array = [3, 2, 10, "Hello"]
            var other_array = [1, 2, 3]
            my_array.extend(other_array)
            \out my_array
            \ref http://stackoverflow.com/a/17368101/3025981
            \comment \lang ru
                Это наиболее эффективный способ расширения списка в случае,
                если второй список очень большой. В отличие от остальных
                методов, здесь не приходится передавать все элементы второго
                списка в качестве аргументов функции.
            \comment \lang en
                This is the most efficient way to extend an array in case
                the `other_array` is very large. In contrast with other methods
                discussed here, in this case we do not pass elements of
                `other_array` as arguments of a function.
        \js \require es6
            var my_array = [3, 2, 10, "Hello"]
            var other_array = [1, 2, 3]
            my_array.push(...other_array)
            my_array
            \ref 
                https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator#A_better_push
            \seealso unpacking
    \compare
        \id deleting-element
        \what \lang ru
            Удаление элемента массива по индексу
        \what \lang en
            Remove array element by index
        \python
            my_list = [2, 10, 15]
            del my_list[1]
            \out my_list
            \out my_list[1]
            \out len(my_list)
        \js
            var my_array = [2, 10, 15];
            delete my_array[1];
            \out my_array
            \out my_array[1]
            \out my_array.length
            \comment \lang ru
                См. также [манипуляции со срезами](#splices).
            \comment \lang en
                See also [splices](#splices).
    \compare
        \id clear-list
        \what \lang ru
            Очистить список / массив
        \what \lang en
            Clear list / array
        \python
            my_list = [1, 2, 10]
            my_list.clear()
            \out my_list
        \js
            var my_array = [1, 2, 10]
            my_array.length = 0
            \out my_array
    \compare
        \id get-element-out-of-range
        \what \lang ru
            Получить элемент с индексом вне диапазона
        \what \lang en
            Get element with index out of range
        \python
            my_list = [1, 20, 10]
            my_list[3]
        \js
            var my_array = [1, 20, 10]
            \out my_array[3]
    \compare
        \id add-elements-out-of-range
        \what \lang ru
            Добавить элемент вне диапазона
        \what \lang en
            Add element out of range
        \python
            my_list = [1, 2, 10]
            my_list[5] = 100
        \js
            var my_array = [1, 2, 10]
            my_array[5] = 100
            \out my_array
            \out my_array[3]
            \out my_array[5]
    \compare
        \id check-in
        \what \lang ru
            Оператор in
        \what \lang en
            Operator in
        \python
            my_list = [1, 7, 10]
            \out 1 in my_list
            \out 7 in my_list
            \out 10 in my_list
            \out 2 in my_list
            \out "1" in my_list
            \comment \lang ru
                Оператор `in` для списков проверяет, находится ли элемент в
                списке.
            \comment \lang en
                Operator `in` for lists checks if element exist in the list.
        \python
            list_like_dict = {
                0: 1,
                1: 7,
                2: 10
            }
            \out 1 in list_like_dict
            \out 7 in list_like_dict
            \out 10 in list_like_dict
            \out 2 in list_like_dict
            \out "1" in list_like_dict
            \comment \lang ru
                Если сделать словарь, похожий на список (с числовыми ключами),
                то оператор `in` будет проверять, находится ли данный элемент
                среди индексов (как это всегда происходит со словарями).
                Примерно так работает аналогичный оператор в JavaScript.
            \comment \lang en
                If one creates a list-like dictionary (with numeric keys), `in`
                operator checks whether element exist among indexes (just like
                with any other dict). This is roughly like JavaScript do.
        \js
            var my_array = [1, 7, 10];
            \out 1 in my_array
            \out 7 in my_array
            \out 10 in my_array
            \out 2 in my_array
            \out "1" in my_array
            \comment \lang ru
                Поскольку массив в JavaScript — это частный случай объекта (то
                есть штуки, похожей на словарь), `in`
                проверяет, есть ли данный элемент среди индексов (ключей), а не
                среди значений. См. [этот
                ответ](http://stackoverflow.com/a/1473742/3025981) по поводу
                проверки на наличие элемента среди значений.
            \comment \lang en
                As Array is a subtype of object (i.e. something dict-like), `in`
                checks if given element exists among indexes (keys), not among
                values. See [this
                answer](http://stackoverflow.com/a/1473742/3025981) for check
                among values.
    \compare
        \id slices
        \what \lang ru
            Срезы
        \what \lang en
            Slices
        \python
            my_list = [0, 10, 20, 30, 40, 50, 60]
            \out my_list[2:4]
            \out my_list[:2]
            \out my_list[2:]
            \out my_list[2:-2]
            \out my_list[:]
            \out my_list[2:6:2]
            \out my_list[4:2:-1]
        \js
            my_array = [0, 10, 20, 30, 40, 50, 60]
            \out my_array.slice(2, 4)
            \out my_array.slice(null, 2)
            \out my_array.slice(2)
            \out my_array.slice(2, -2)
            \out my_array.slice()
            \comment \lang ru
                Срезов с шагом (третий аргумент в Python) в JavaScript по
                умолчанию нет.
            \comment \lang en
                There's no slices with step (third argument in Python's) by
                default in JavaScript.
            \ref https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/slice
    \compare
        \id splices
        \what \lang ru
            Манипуляции с фрагментами
        \what \lang en
            Splice modifications
        \python
            my_list = [0, 10, 20, 30, 40]
            my_list[2:4] = [200, 300, 400]
            \out my_list
            my_list[1:2] = []
            \out my_list
            my_list[3:3] = [999]
            \out my_list
        \js
            var my_array = [0, 10, 20, 30, 40];
            var deleted;
            deleted = my_array.splice(2, 2, 200, 300, 400);
            \out my_array
            \out deleted
            my_array.splice(1, 1);
            \out my_array
            my_array.splice(3, 0, 999);
            \out my_array
            \comment \lang ru
                Метод `splice(start, deleteCount, item1, item2, ...)`
                редактирует массив in place: удаляет `deleteCount` элементов,
                начиная с `start`, затем добавляет элементы `item1`, `item2`,
                и т.д.
            \comment \lang en
                Method `splice(start, deleteCount, item1, item2, ...)` edits
                array in place: deletes `deleteCount` elements, beginning from
                `start`, then add elements `item1`, `item2` and so on.
            \ref 
                https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/splice
